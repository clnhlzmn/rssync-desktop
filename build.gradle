plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
    id 'application'
}

group 'xyz.colinholzman'
version '0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //remotestorage_kotlin
    implementation files('../remotestorage_kotlin/build/libs/remotestorage_kotlin-0.0.0.jar')
    //remotestorage_kotlin needs these
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

mainClassName = "xyz.colinholzman.rssync_desktop.Main"

jar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

//to make a start script that doesn't open console window
apply from: "IO.gradle"

// Modify the Windows start script so that no console is shown when the user starts the app.
// This also creates a copy of the original start script in case we want to use the console for debugging
startScripts << {

    def startScriptDir = outputDir.getAbsolutePath()
    def winStartScript = startScriptDir + "/" + applicationName + ".bat"
    def winStartScriptCopy = startScriptDir + "/" + applicationName + "WithConsole.bat"
    def overwriteExistingFile = true
    copyFile(winStartScript, winStartScriptCopy, overwriteExistingFile)

    modifyFile(winStartScript) {
        // javaw.exe doesn't have a console
        if(it.contains("java.exe")){
            return it.replace("java.exe", "javaw.exe")
        }
        // Command that launches the app
        else if(it.startsWith("\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%")){
            return "start \"\" /b " + it
        }
        // Leave the line unchanged
        else{
            return it
        }
    }
}

//installApp {
//    // Include the additional start script
//    into("bin/"){
//        from(startScripts.outputDir)
//    }
//}